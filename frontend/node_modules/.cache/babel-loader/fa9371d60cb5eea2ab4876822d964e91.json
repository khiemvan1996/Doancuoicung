{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/Doantotnghiep/Doantotnghiep/dynonary-english/frontend/src/components/Contribution/Word/data.js\",\n  _s = $RefreshSig$();\nimport wordApi from 'apis/wordApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport WordContribution from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst analysisExample = function () {\n  let exampleStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let word = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (typeof exampleStr !== 'string' || exampleStr === '') {\n    return [];\n  }\n  const exampleArr = exampleStr.split('\\n');\n  for (let str of exampleArr) {\n    if (str.toLocaleLowerCase().indexOf(word.toLocaleLowerCase()) === -1) {\n      return false;\n    }\n  }\n  return exampleArr;\n};\nfunction WordContributionData() {\n  _s();\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n  const handleSubmit = async data => {\n    try {\n      setSubmitting(true);\n      const {\n        examples,\n        synonyms,\n        antonyms,\n        word,\n        phonetic,\n        ...rest\n      } = data;\n\n      // check examples validation\n      const exampleArr = analysisExample(examples, word);\n      if (typeof exampleArr === 'boolean' && !exampleArr) {\n        dispatch(setMessage({\n          type: 'warning',\n          message: 'Câu ví dụ phải chứa từ vựng mới.'\n        }));\n        setSubmitting(false);\n        return;\n      }\n\n      // split synonyms string to an array synonyms\n      const synonymArr = synonyms !== '' ? synonyms.split('\\n') : [];\n\n      // split antonyms string to an array synonyms\n      const antonymArr = antonyms !== '' ? antonyms.split('\\n') : [];\n\n      // call API\n      const dataSend = {\n        ...rest,\n        examples: exampleArr,\n        synonyms: synonymArr,\n        antonyms: antonymArr,\n        word,\n        phonetic: phonetic.replaceAll('/', '')\n      };\n      const apiRes = await wordApi.postContributeWord(dataSend);\n      if (apiRes.status === 200) {\n        dispatch(setMessage({\n          type: 'success',\n          message: 'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\n          duration: 5000\n        }));\n        setSubmitting(false);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Thêm từ mới không thành công, thử lại';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n      setSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WordContribution, {\n    onSubmitForm: handleSubmit,\n    submitting: submitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(WordContributionData, \"5iB+qujXnQj6jBoSGKljUlKKZP8=\", false, function () {\n  return [useDispatch];\n});\n_c = WordContributionData;\nexport default WordContributionData;\nvar _c;\n$RefreshReg$(_c, \"WordContributionData\");","map":{"version":3,"names":["wordApi","React","useState","useDispatch","setMessage","WordContribution","analysisExample","exampleStr","word","exampleArr","split","str","toLocaleLowerCase","indexOf","WordContributionData","submitting","setSubmitting","dispatch","handleSubmit","data","examples","synonyms","antonyms","phonetic","rest","type","message","synonymArr","antonymArr","dataSend","replaceAll","apiRes","postContributeWord","status","duration","error","response"],"sources":["/Users/mac/Documents/Doantotnghiep/Doantotnghiep/dynonary-english/frontend/src/components/Contribution/Word/data.js"],"sourcesContent":["import wordApi from 'apis/wordApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport WordContribution from './index';\n\nconst analysisExample = (exampleStr = '', word = '') => {\n  if (typeof exampleStr !== 'string' || exampleStr === '') {\n    return [];\n  }\n\n  const exampleArr = exampleStr.split('\\n');\n  for (let str of exampleArr) {\n    if (str.toLocaleLowerCase().indexOf(word.toLocaleLowerCase()) === -1) {\n      return false;\n    }\n  }\n\n  return exampleArr;\n};\n\nfunction WordContributionData() {\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (data) => {\n    try {\n      setSubmitting(true);\n      const { examples, synonyms, antonyms, word, phonetic, ...rest } = data;\n\n      // check examples validation\n      const exampleArr = analysisExample(examples, word);\n      if (typeof exampleArr === 'boolean' && !exampleArr) {\n        dispatch(\n          setMessage({\n            type: 'warning',\n            message: 'Câu ví dụ phải chứa từ vựng mới.',\n          }),\n        );\n        setSubmitting(false);\n        return;\n      }\n\n      // split synonyms string to an array synonyms\n      const synonymArr = synonyms !== '' ? synonyms.split('\\n') : [];\n\n      // split antonyms string to an array synonyms\n      const antonymArr = antonyms !== '' ? antonyms.split('\\n') : [];\n\n      // call API\n      const dataSend = {\n        ...rest,\n        examples: exampleArr,\n        synonyms: synonymArr,\n        antonyms: antonymArr,\n        word,\n        phonetic: phonetic.replaceAll('/', ''),\n      };\n\n      const apiRes = await wordApi.postContributeWord(dataSend);\n\n      if (apiRes.status === 200) {\n        dispatch(\n          setMessage({\n            type: 'success',\n            message:\n              'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\n            duration: 5000,\n          }),\n        );\n        setSubmitting(false);\n      }\n    } catch (error) {\n      const message =\n        error.response?.data?.message ||\n        'Thêm từ mới không thành công, thử lại';\n      dispatch(\n        setMessage({\n          type: 'error',\n          message,\n        }),\n      );\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <WordContribution onSubmitForm={handleSubmit} submitting={submitting} />\n  );\n}\n\nexport default WordContributionData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}