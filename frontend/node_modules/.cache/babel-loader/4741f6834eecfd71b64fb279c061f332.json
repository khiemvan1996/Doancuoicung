{"ast":null,"code":"import { COLOR_VAR_KEYS, DEFAULTS, THEME_KEYS, VOICE_KEYS } from 'constant';\nconst htmlRoot = document.querySelector(':root');\n\n// prevent execute continuously a function\nexport const debounce = function () {\n  let timer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let cbFn = arguments.length > 1 ? arguments[1] : undefined;\n  let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 350;\n  if (timer) {\n    clearTimeout(timer);\n  }\n  return setTimeout(cbFn, delay);\n};\n\n// compare 2 arrays\nexport const equalArray = (a, b) => {\n  return Array.isArray(a) && Array.isArray(b) && a.length === b.length && a.every((val, index) => val === b[index]);\n};\n\n// get current root palettes\nfunction getRootPalettes() {\n  let palettes = [];\n  const rootStyles = getComputedStyle(htmlRoot);\n  COLOR_VAR_KEYS.forEach(item => {\n    let color = rootStyles.getPropertyValue(item.key);\n    palettes.push({\n      ...item,\n      color: color[0] === '#' ? color : color.slice(1) // output ' #123456' => slice(1) = '#123456'\n    });\n  });\n\n  return palettes;\n}\n\n// get custom palettes from local storage\nexport const getCustomPalettes = () => {\n  const palettes = localStorage.getItem(THEME_KEYS.PALETTE_KEY);\n  if (!palettes) {\n    const newPalettes = getRootPalettes();\n    localStorage.setItem(THEME_KEYS.PALETTE_KEY, JSON.stringify(newPalettes));\n    return newPalettes;\n  } else {\n    return JSON.parse(palettes);\n  }\n};\n\n// set palettes for root\nexport const setRootPalettes = () => {\n  const palettes = getCustomPalettes();\n  palettes === null || palettes === void 0 ? void 0 : palettes.forEach(item => htmlRoot.style.setProperty(item.key, item.color));\n};\n\n// get window voice list\nexport const getSpeechSynthesis = () => {\n  return new Promise(resolve => {\n    let synth = window.speechSynthesis;\n    let intervalId;\n    intervalId = setInterval(() => {\n      if (synth.getVoices().length !== 0) {\n        clearInterval(intervalId);\n        resolve(synth.getVoices());\n      }\n    }, 20);\n  });\n};\n\n// update or add custom voice in local storage\nexport const updateLSVoice = (key, value) => {\n  let current = localStorage.getItem(VOICE_KEYS.LS_KEY);\n  let newLSVoice = {};\n  if (current) {\n    newLSVoice = JSON.parse(current);\n    newLSVoice[key] = value;\n  } else {\n    newLSVoice = {\n      voiceURI: DEFAULTS.VOICE_URI,\n      speed: DEFAULTS.VOICE_SPEED,\n      volume: DEFAULTS.VOICE_VOLUME\n    };\n    newLSVoice[key] = value;\n  }\n  localStorage.setItem(VOICE_KEYS.LS_KEY, JSON.stringify(newLSVoice));\n};\n\n// optimize images\nexport const cloudinaryImgOptimize = function () {\n  let originSrc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let fAuto = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  let qAuto = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  let others = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  if (!originSrc) return '';\n  const cloudinaryBaseURL = 'https://res.cloudinary.com/dynonary/image/upload';\n  const index = originSrc.indexOf(cloudinaryBaseURL);\n\n  // Not cloudinary source\n  if (index === -1) {\n    return originSrc;\n  }\n  let optimize = `${width > 0 ? `w_${width},` : ''}${height > 0 ? `h_${height},` : ''}${fAuto ? 'f_auto,' : ''}${qAuto ? 'q_auto,' : ''}${others && others !== '' ? others : ''}`;\n  if (optimize[optimize.length - 1] === ',') optimize = optimize.slice(0, optimize.length - 1);\n  return originSrc.replace(cloudinaryBaseURL, `${cloudinaryBaseURL}/${optimize}`);\n};\nexport const addOrDelItemInArray = function () {\n  let arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let item = arguments.length > 1 ? arguments[1] : undefined;\n  if (!arr || !Array.isArray(arr)) return arr;\n  const index = arr.findIndex(i => i === item);\n  if (index === -1) {\n    arr.push(item);\n    return arr;\n  }\n  arr.splice(index, 1);\n  return arr;\n};\nexport const formatDate = function () {\n  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  try {\n    const d = new Date(date);\n    const day = `0${d.getDate()}`.slice(-2);\n    const m = `0${d.getMonth() + 1}`.slice(-2);\n    const y = d.getFullYear();\n    return `${day}-${m}-${y}`;\n  } catch (error) {\n    return date;\n  }\n};","map":{"version":3,"names":["COLOR_VAR_KEYS","DEFAULTS","THEME_KEYS","VOICE_KEYS","htmlRoot","document","querySelector","debounce","timer","cbFn","delay","clearTimeout","setTimeout","equalArray","a","b","Array","isArray","length","every","val","index","getRootPalettes","palettes","rootStyles","getComputedStyle","forEach","item","color","getPropertyValue","key","push","slice","getCustomPalettes","localStorage","getItem","PALETTE_KEY","newPalettes","setItem","JSON","stringify","parse","setRootPalettes","style","setProperty","getSpeechSynthesis","Promise","resolve","synth","window","speechSynthesis","intervalId","setInterval","getVoices","clearInterval","updateLSVoice","value","current","LS_KEY","newLSVoice","voiceURI","VOICE_URI","speed","VOICE_SPEED","volume","VOICE_VOLUME","cloudinaryImgOptimize","originSrc","width","height","fAuto","qAuto","others","cloudinaryBaseURL","indexOf","optimize","replace","addOrDelItemInArray","arr","findIndex","i","splice","formatDate","date","Date","d","day","getDate","m","getMonth","y","getFullYear","error"],"sources":["/Users/mac/Documents/Doantotnghiep/Doantotnghiep/EKwebsite/frontend/src/helper/index.js"],"sourcesContent":["import { COLOR_VAR_KEYS, DEFAULTS, THEME_KEYS, VOICE_KEYS } from 'constant';\nconst htmlRoot = document.querySelector(':root');\n\n// prevent execute continuously a function\nexport const debounce = (timer = null, cbFn, delay = 350) => {\n  if (timer) {\n    clearTimeout(timer);\n  }\n  return setTimeout(cbFn, delay);\n};\n\n// compare 2 arrays\nexport const equalArray = (a, b) => {\n  return (\n    Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val === b[index])\n  );\n};\n\n// get current root palettes\nfunction getRootPalettes() {\n  let palettes = [];\n  const rootStyles = getComputedStyle(htmlRoot);\n\n  COLOR_VAR_KEYS.forEach((item) => {\n    let color = rootStyles.getPropertyValue(item.key);\n\n    palettes.push({\n      ...item,\n      color: color[0] === '#' ? color : color.slice(1), // output ' #123456' => slice(1) = '#123456'\n    });\n  });\n\n  return palettes;\n}\n\n// get custom palettes from local storage\nexport const getCustomPalettes = () => {\n  const palettes = localStorage.getItem(THEME_KEYS.PALETTE_KEY);\n  if (!palettes) {\n    const newPalettes = getRootPalettes();\n    localStorage.setItem(THEME_KEYS.PALETTE_KEY, JSON.stringify(newPalettes));\n    return newPalettes;\n  } else {\n    return JSON.parse(palettes);\n  }\n};\n\n// set palettes for root\nexport const setRootPalettes = () => {\n  const palettes = getCustomPalettes();\n  palettes?.forEach((item) => htmlRoot.style.setProperty(item.key, item.color));\n};\n\n// get window voice list\nexport const getSpeechSynthesis = () => {\n  return new Promise((resolve) => {\n    let synth = window.speechSynthesis;\n    let intervalId;\n\n    intervalId = setInterval(() => {\n      if (synth.getVoices().length !== 0) {\n        clearInterval(intervalId);\n        resolve(synth.getVoices());\n      }\n    }, 20);\n  });\n};\n\n// update or add custom voice in local storage\nexport const updateLSVoice = (key, value) => {\n  let current = localStorage.getItem(VOICE_KEYS.LS_KEY);\n  let newLSVoice = {};\n\n  if (current) {\n    newLSVoice = JSON.parse(current);\n    newLSVoice[key] = value;\n  } else {\n    newLSVoice = {\n      voiceURI: DEFAULTS.VOICE_URI,\n      speed: DEFAULTS.VOICE_SPEED,\n      volume: DEFAULTS.VOICE_VOLUME,\n    };\n    newLSVoice[key] = value;\n  }\n\n  localStorage.setItem(VOICE_KEYS.LS_KEY, JSON.stringify(newLSVoice));\n};\n\n// optimize images\nexport const cloudinaryImgOptimize = (\n  originSrc = '',\n  width = 0,\n  height = 0,\n  fAuto = true,\n  qAuto = true,\n  others = '',\n) => {\n  if (!originSrc) return '';\n\n  const cloudinaryBaseURL = 'https://res.cloudinary.com/dynonary/image/upload';\n  const index = originSrc.indexOf(cloudinaryBaseURL);\n\n  // Not cloudinary source\n  if (index === -1) {\n    return originSrc;\n  }\n\n  let optimize = `${width > 0 ? `w_${width},` : ''}${\n    height > 0 ? `h_${height},` : ''\n  }${fAuto ? 'f_auto,' : ''}${qAuto ? 'q_auto,' : ''}${\n    others && others !== '' ? others : ''\n  }`;\n\n  if (optimize[optimize.length - 1] === ',')\n    optimize = optimize.slice(0, optimize.length - 1);\n\n  return originSrc.replace(\n    cloudinaryBaseURL,\n    `${cloudinaryBaseURL}/${optimize}`,\n  );\n};\n\nexport const addOrDelItemInArray = (arr = [], item) => {\n  if (!arr || !Array.isArray(arr)) return arr;\n\n  const index = arr.findIndex((i) => i === item);\n\n  if (index === -1) {\n    arr.push(item);\n    return arr;\n  }\n\n  arr.splice(index, 1);\n  return arr;\n};\n\nexport const formatDate = (date = new Date()) => {\n  try {\n    const d = new Date(date);\n    const day = `0${d.getDate()}`.slice(-2);\n    const m = `0${d.getMonth() + 1}`.slice(-2);\n    const y = d.getFullYear();\n    return `${day}-${m}-${y}`;\n  } catch (error) {\n    return date;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}