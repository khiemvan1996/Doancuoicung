{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/Doantotnghiep/Doantotnghiep/EKwebsite/frontend/src/components/DynoDictionary/Favorite/data.js\",\n  _s = $RefreshSig$();\nimport wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport FavoriteDictionary from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst perPage = 20;\nfunction FavoriteDictionaryData() {\n  _s();\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const {\n    favoriteList\n  } = useSelector(state => state.userInfo);\n  const totalPage = favoriteList.length;\n  const preSearchList = useRef([]);\n  const nextPage = () => {\n    if (page < totalPage) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n  const onSortTypeChange = function () {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rand';\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n  const onSearchWord = async word => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n      const apiRes = await wordApi.getSearchWord(word);\n      if (apiRes.status === 200) {\n        const {\n          packList = []\n        } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get favorite list\n  useEffect(() => {\n    let isSub = true;\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getUserFavoriteList(page, perPage, sortType);\n        if (apiRes.status === 200 && isSub) {\n          const {\n            packList = []\n          } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n    return () => isSub = false;\n  }, [page, sortType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FavoriteDictionary, {\n      list: list,\n      loading: loading,\n      onLoadData: nextPage,\n      more: more,\n      isFirstLoad: isFirstLoad,\n      onSortTypeChange: onSortTypeChange,\n      onSearchWord: onSearchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WordDetailModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(FavoriteDictionaryData, \"BVrvjf+xBRZWtrmCAR8nMUkp2B0=\", false, function () {\n  return [useSelector];\n});\n_c = FavoriteDictionaryData;\nexport default FavoriteDictionaryData;\nvar _c;\n$RefreshReg$(_c, \"FavoriteDictionaryData\");","map":{"version":3,"names":["wordApi","WordDetailModal","React","useEffect","useRef","useState","useSelector","FavoriteDictionary","perPage","FavoriteDictionaryData","page","setPage","sortType","setSortType","loading","setLoading","list","setList","more","setMore","isFirstLoad","setIsFirstLoad","favoriteList","state","userInfo","totalPage","length","preSearchList","nextPage","onSortTypeChange","type","current","onSearchWord","word","apiRes","getSearchWord","status","packList","data","error","isSub","getUserFavoriteList","newList"],"sources":["/Users/mac/Documents/Doantotnghiep/Doantotnghiep/EKwebsite/frontend/src/components/DynoDictionary/Favorite/data.js"],"sourcesContent":["import wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport FavoriteDictionary from '.';\n\nconst perPage = 20;\n\nfunction FavoriteDictionaryData() {\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const { favoriteList } = useSelector((state) => state.userInfo);\n  const totalPage = favoriteList.length;\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const onSortTypeChange = (type = 'rand') => {\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n\n  const onSearchWord = async (word) => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await wordApi.getSearchWord(word);\n      if (apiRes.status === 200) {\n        const { packList = [] } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get favorite list\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getUserFavoriteList(\n          page,\n          perPage,\n          sortType,\n        );\n        if (apiRes.status === 200 && isSub) {\n          const { packList = [] } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, sortType]);\n\n  return (\n    <>\n      <FavoriteDictionary\n        list={list}\n        loading={loading}\n        onLoadData={nextPage}\n        more={more}\n        isFirstLoad={isFirstLoad}\n        onSortTypeChange={onSortTypeChange}\n        onSearchWord={onSearchWord}\n      />\n      <WordDetailModal />\n    </>\n  );\n}\n\nexport default FavoriteDictionaryData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}