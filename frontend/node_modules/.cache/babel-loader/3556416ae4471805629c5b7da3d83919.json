{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/Doantotnghiep/Doantotnghiep/EKwebsite/frontend/src/pages/ImageToText.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexports.updateAvt = async function () {\n  let username = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let image = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  try {\n    const picture = await uploadImage(image, 'dynonary/user-avt');\n    const isUpdated = await UserModel.updateOne({\n      avt: picture\n    });\n    if (isUpdated.n && isUpdated.ok) return picture;\n    return false;\n  } catch (error) {\n    throw error;\n  }\n};\nexport default function ImagetoTextScreen() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [progress, setProgress] = useState(0);\n  const [url, setUrl] = useState(\"https://www.researchgate.net/publication/337702424/figure/fig3/AS:831888872730624@1575349171831/Students-Paragraph-Writing.png\");\n  const [country, setCountry] = useState(\"vie\");\n  useEffect(() => {\n    handleImageToText();\n  }, []);\n  const handleImageToText = () => {\n    setProgress(0);\n    Tesseract.recognize(url, country, {\n      logger: m => setProgress(m === null || m === void 0 ? void 0 : m.progress)\n    }).then(_ref => {\n      let {\n        data: {\n          text\n        }\n      } = _ref;\n      setText(text);\n      setLoading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"This is text \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `loading text ${Math.round(progress * 100)} %`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 81\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(ImagetoTextScreen, \"+EnOd7Z0cB2CrYleJjMkWf/NhY8=\");\n_c = ImagetoTextScreen;\nvar _c;\n$RefreshReg$(_c, \"ImagetoTextScreen\");","map":{"version":3,"names":["React","useEffect","useState","Tesseract","exports","updateAvt","username","image","picture","uploadImage","isUpdated","UserModel","updateOne","avt","n","ok","error","ImagetoTextScreen","text","setText","loading","setLoading","progress","setProgress","url","setUrl","country","setCountry","handleImageToText","recognize","logger","m","then","data","Math","round"],"sources":["/Users/mac/Documents/Doantotnghiep/Doantotnghiep/EKwebsite/frontend/src/pages/ImageToText.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Tesseract from 'tesseract.js';\n\nexports.updateAvt = async (username = '', image = '') => {\n    try {\n      const picture = await uploadImage(image, 'dynonary/user-avt');\n      const isUpdated = await UserModel.updateOne({ avt: picture });\n      if (isUpdated.n && isUpdated.ok) return picture;\n  \n      return false;\n    } catch (error) {\n      throw error;\n    }\n  };\nexport default function ImagetoTextScreen(){\n    const [text,setText] = useState(\"\")\n    const [loading,setLoading] = useState(true)\n    const [progress,setProgress] = useState(0)\n    const [url,setUrl] = useState(\"https://www.researchgate.net/publication/337702424/figure/fig3/AS:831888872730624@1575349171831/Students-Paragraph-Writing.png\")\n    const [country,setCountry] = useState(\"vie\")\n    useEffect(()=>{\n        handleImageToText()\n    },[])\n\n    const handleImageToText = ()=>{\n        setProgress(0)\n        Tesseract.recognize(\n            url,\n            country,\n            { logger: m => setProgress(m?.progress) }\n          ).then(({ data: { text } }) => {\n            setText(text)\n            setLoading(false)\n        })\n    }\n    return(\n        <div>\n            <h1>This is text </h1>\n            {loading ? <p>{`loading text ${Math.round(progress * 100)} %`}</p>: <p>{text}</p> }\n \n        </div>\n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,cAAc;AAAC;AAErCC,OAAO,CAACC,SAAS,GAAG,kBAAqC;EAAA,IAA9BC,QAAQ,uEAAG,EAAE;EAAA,IAAEC,KAAK,uEAAG,EAAE;EAChD,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMC,WAAW,CAACF,KAAK,EAAE,mBAAmB,CAAC;IAC7D,MAAMG,SAAS,GAAG,MAAMC,SAAS,CAACC,SAAS,CAAC;MAAEC,GAAG,EAAEL;IAAQ,CAAC,CAAC;IAC7D,IAAIE,SAAS,CAACI,CAAC,IAAIJ,SAAS,CAACK,EAAE,EAAE,OAAOP,OAAO;IAE/C,OAAO,KAAK;EACd,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AACH,eAAe,SAASC,iBAAiB,GAAE;EAAA;EACvC,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACnC,MAAM,CAACkB,OAAO,EAACC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC3C,MAAM,CAACoB,QAAQ,EAACC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACsB,GAAG,EAACC,MAAM,CAAC,GAAGvB,QAAQ,CAAC,gIAAgI,CAAC;EAC/J,MAAM,CAACwB,OAAO,EAACC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC5CD,SAAS,CAAC,MAAI;IACV2B,iBAAiB,EAAE;EACvB,CAAC,EAAC,EAAE,CAAC;EAEL,MAAMA,iBAAiB,GAAG,MAAI;IAC1BL,WAAW,CAAC,CAAC,CAAC;IACdpB,SAAS,CAAC0B,SAAS,CACfL,GAAG,EACHE,OAAO,EACP;MAAEI,MAAM,EAAEC,CAAC,IAAIR,WAAW,CAACQ,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAET,QAAQ;IAAE,CAAC,CAC1C,CAACU,IAAI,CAAC,QAAwB;MAAA,IAAvB;QAAEC,IAAI,EAAE;UAAEf;QAAK;MAAE,CAAC;MACxBC,OAAO,CAACD,IAAI,CAAC;MACbG,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACN,CAAC;EACD,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB,EACrBD,OAAO,gBAAG;MAAA,UAAK,gBAAec,IAAI,CAACC,KAAK,CAACb,QAAQ,GAAG,GAAG,CAAE;IAAG;MAAA;MAAA;MAAA;IAAA,QAAK,gBAAE;MAAA,UAAIJ;IAAI;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QAE/E;AAEd;AAAC,GA5BuBD,iBAAiB;AAAA,KAAjBA,iBAAiB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}