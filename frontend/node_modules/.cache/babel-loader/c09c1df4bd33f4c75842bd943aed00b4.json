{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/Doantotnghiep/Doantotnghiep/dynonary-english/frontend/src/components/DynoDictionary/data.js\",\n  _s = $RefreshSig$();\nimport commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport { TOEIC_KEY } from 'constant/topics';\nimport { equalArray } from 'helper';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport DynoDictionary from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst perPage = 20;\nfunction DynoDictionaryData(_ref) {\n  _s();\n  let {\n    isTOEIC\n  } = _ref;\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [packInfo, setPackInfo] = useState(() => ({\n    type: '-1',\n    level: '-1',\n    specialty: '-1',\n    topics: isTOEIC ? [TOEIC_KEY] : []\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n  const settingWordPack = info => {\n    // check old pack vs new pack\n    let isEqual = true;\n    for (let k in packInfo) {\n      if (k !== 'topics' && packInfo[k] !== info[k]) {\n        isEqual = false;\n        break;\n      }\n    }\n    if (isEqual) isEqual = equalArray(packInfo.topics, info.topics);\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n  const onSortTypeChange = function () {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rand';\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n  const onSearchWord = async word => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n      const apiRes = await wordApi.getSearchWord(word);\n      if (apiRes.status === 200) {\n        const {\n          packList = []\n        } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get total word pack\n  useEffect(() => {\n    let isSub = true;\n    (async function () {\n      try {\n        const apiRes = await commonApi.getWordPackTotal(packInfo);\n        if (apiRes.status === 200 && isSub) {\n          const {\n            total = 0\n          } = apiRes.data;\n          totalPage.current = Math.ceil(total / perPage);\n        }\n      } catch (error) {}\n    })();\n    return () => isSub = false;\n  }, [packInfo]);\n\n  // get word pack\n  useEffect(() => {\n    let isSub = true;\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getWordList(page, perPage, packInfo, sortType);\n        if (apiRes.status === 200 && isSub) {\n          const {\n            packList = []\n          } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n    return () => isSub = false;\n  }, [page, packInfo, sortType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DynoDictionary, {\n      isTOEIC: isTOEIC,\n      list: list,\n      loading: loading,\n      onLoadData: nextPage,\n      more: more,\n      isFirstLoad: isFirstLoad,\n      onSettingWordPack: settingWordPack,\n      onSortTypeChange: onSortTypeChange,\n      onSearchWord: onSearchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WordDetailModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(DynoDictionaryData, \"ZMYZhlhwbZRE2hbK9PfvCxdEWdY=\");\n_c = DynoDictionaryData;\nDynoDictionaryData.propTypes = {\n  isTOEIC: PropTypes.bool\n};\nDynoDictionaryData.defaultProps = {\n  isTOEIC: false\n};\nexport default DynoDictionaryData;\nvar _c;\n$RefreshReg$(_c, \"DynoDictionaryData\");","map":{"version":3,"names":["commonApi","wordApi","WordDetailModal","TOEIC_KEY","equalArray","PropTypes","React","useEffect","useRef","useState","DynoDictionary","perPage","DynoDictionaryData","isTOEIC","page","setPage","sortType","setSortType","packInfo","setPackInfo","type","level","specialty","topics","loading","setLoading","list","setList","more","setMore","isFirstLoad","setIsFirstLoad","totalPage","preSearchList","nextPage","current","settingWordPack","info","isEqual","k","onSortTypeChange","onSearchWord","word","apiRes","getSearchWord","status","packList","data","error","isSub","getWordPackTotal","total","Math","ceil","getWordList","newList","propTypes","bool","defaultProps"],"sources":["/Users/mac/Documents/Doantotnghiep/Doantotnghiep/dynonary-english/frontend/src/components/DynoDictionary/data.js"],"sourcesContent":["import commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport { TOEIC_KEY } from 'constant/topics';\nimport { equalArray } from 'helper';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport DynoDictionary from '.';\n\nconst perPage = 20;\n\nfunction DynoDictionaryData({ isTOEIC }) {\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [packInfo, setPackInfo] = useState(() => ({\n    type: '-1',\n    level: '-1',\n    specialty: '-1',\n    topics: isTOEIC ? [TOEIC_KEY] : [],\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = (info) => {\n    // check old pack vs new pack\n    let isEqual = true;\n    for (let k in packInfo) {\n      if (k !== 'topics' && packInfo[k] !== info[k]) {\n        isEqual = false;\n        break;\n      }\n    }\n    if (isEqual) isEqual = equalArray(packInfo.topics, info.topics);\n\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSortTypeChange = (type = 'rand') => {\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n\n  const onSearchWord = async (word) => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await wordApi.getSearchWord(word);\n      if (apiRes.status === 200) {\n        const { packList = [] } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get total word pack\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await commonApi.getWordPackTotal(packInfo);\n        if (apiRes.status === 200 && isSub) {\n          const { total = 0 } = apiRes.data;\n          totalPage.current = Math.ceil(total / perPage);\n        }\n      } catch (error) {}\n    })();\n\n    return () => (isSub = false);\n  }, [packInfo]);\n\n  // get word pack\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getWordList(\n          page,\n          perPage,\n          packInfo,\n          sortType,\n        );\n        if (apiRes.status === 200 && isSub) {\n          const { packList = [] } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, packInfo, sortType]);\n\n  return (\n    <>\n      <DynoDictionary\n        isTOEIC={isTOEIC}\n        list={list}\n        loading={loading}\n        onLoadData={nextPage}\n        more={more}\n        isFirstLoad={isFirstLoad}\n        onSettingWordPack={settingWordPack}\n        onSortTypeChange={onSortTypeChange}\n        onSearchWord={onSearchWord}\n      />\n      <WordDetailModal />\n    </>\n  );\n}\n\nDynoDictionaryData.propTypes = {\n  isTOEIC: PropTypes.bool,\n};\n\nDynoDictionaryData.defaultProps = {\n  isTOEIC: false,\n};\n\nexport default DynoDictionaryData;\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,UAAU,QAAQ,QAAQ;AACnC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,cAAc,MAAM,GAAG;AAAC;AAAA;AAE/B,MAAMC,OAAO,GAAG,EAAE;AAElB,SAASC,kBAAkB,OAAc;EAAA;EAAA,IAAb;IAAEC;EAAQ,CAAC;EACrC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,MAAM,CAAC;EAChD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,OAAO;IAC9CW,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,IAAI;IACXC,SAAS,EAAE,IAAI;IACfC,MAAM,EAAEV,OAAO,GAAG,CAACV,SAAS,CAAC,GAAG;EAClC,CAAC,CAAC,CAAC;EACH,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMuB,SAAS,GAAGxB,MAAM,CAAC,CAAC,CAAC;EAC3B,MAAMyB,aAAa,GAAGzB,MAAM,CAAC,EAAE,CAAC;EAEhC,MAAM0B,QAAQ,GAAG,MAAM;IACrB,IAAIpB,IAAI,GAAGkB,SAAS,CAACG,OAAO,EAAE;MAC5BpB,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;IACnB,CAAC,MAAM;MACLe,OAAO,CAAC,KAAK,CAAC;IAChB;EACF,CAAC;EAED,MAAMO,eAAe,GAAIC,IAAI,IAAK;IAChC;IACA,IAAIC,OAAO,GAAG,IAAI;IAClB,KAAK,IAAIC,CAAC,IAAIrB,QAAQ,EAAE;MACtB,IAAIqB,CAAC,KAAK,QAAQ,IAAIrB,QAAQ,CAACqB,CAAC,CAAC,KAAKF,IAAI,CAACE,CAAC,CAAC,EAAE;QAC7CD,OAAO,GAAG,KAAK;QACf;MACF;IACF;IACA,IAAIA,OAAO,EAAEA,OAAO,GAAGlC,UAAU,CAACc,QAAQ,CAACK,MAAM,EAAEc,IAAI,CAACd,MAAM,CAAC;IAE/DS,SAAS,CAACG,OAAO,GAAG,CAAC;IACrBF,aAAa,CAACE,OAAO,GAAG,EAAE;IAC1BN,OAAO,CAAC,IAAI,CAAC;IACbF,OAAO,CAAC,EAAE,CAAC;IACXR,WAAW,CAACkB,IAAI,CAAC;IACjBtB,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC;EAED,MAAMyB,gBAAgB,GAAG,YAAmB;IAAA,IAAlBpB,IAAI,uEAAG,MAAM;IACrC,IAAIA,IAAI,KAAKJ,QAAQ,EAAE;IACvBiB,aAAa,CAACE,OAAO,GAAG,EAAE;IAC1BlB,WAAW,CAACG,IAAI,CAAC;IACjBL,OAAO,CAAC,CAAC,CAAC;IACVY,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;EAED,MAAMc,YAAY,GAAG,MAAOC,IAAI,IAAK;IACnC,IAAI;MACF,IAAIA,IAAI,KAAK,EAAE,EAAE;QACff,OAAO,CAACM,aAAa,CAACE,OAAO,CAAC;QAC9BN,OAAO,CAAC,IAAI,CAAC;QACb;MACF;MAEA,MAAMc,MAAM,GAAG,MAAM1C,OAAO,CAAC2C,aAAa,CAACF,IAAI,CAAC;MAChD,IAAIC,MAAM,CAACE,MAAM,KAAK,GAAG,EAAE;QACzB,MAAM;UAAEC,QAAQ,GAAG;QAAG,CAAC,GAAGH,MAAM,CAACI,IAAI;QACrCpB,OAAO,CAACmB,QAAQ,CAAC;QACjBjB,OAAO,CAAC,KAAK,CAAC;MAChB;IACF,CAAC,CAAC,OAAOmB,KAAK,EAAE,CAAC;EACnB,CAAC;;EAED;EACAzC,SAAS,CAAC,MAAM;IACd,IAAI0C,KAAK,GAAG,IAAI;IAEhB,CAAC,kBAAkB;MACjB,IAAI;QACF,MAAMN,MAAM,GAAG,MAAM3C,SAAS,CAACkD,gBAAgB,CAAChC,QAAQ,CAAC;QACzD,IAAIyB,MAAM,CAACE,MAAM,KAAK,GAAG,IAAII,KAAK,EAAE;UAClC,MAAM;YAAEE,KAAK,GAAG;UAAE,CAAC,GAAGR,MAAM,CAACI,IAAI;UACjCf,SAAS,CAACG,OAAO,GAAGiB,IAAI,CAACC,IAAI,CAACF,KAAK,GAAGxC,OAAO,CAAC;QAChD;MACF,CAAC,CAAC,OAAOqC,KAAK,EAAE,CAAC;IACnB,CAAC,GAAG;IAEJ,OAAO,MAAOC,KAAK,GAAG,KAAM;EAC9B,CAAC,EAAE,CAAC/B,QAAQ,CAAC,CAAC;;EAEd;EACAX,SAAS,CAAC,MAAM;IACd,IAAI0C,KAAK,GAAG,IAAI;IAEhB,CAAC,kBAAkB;MACjB,IAAI;QACFxB,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMkB,MAAM,GAAG,MAAM1C,OAAO,CAACqD,WAAW,CACtCxC,IAAI,EACJH,OAAO,EACPO,QAAQ,EACRF,QAAQ,CACT;QACD,IAAI2B,MAAM,CAACE,MAAM,KAAK,GAAG,IAAII,KAAK,EAAE;UAClC,MAAM;YAAEH,QAAQ,GAAG;UAAG,CAAC,GAAGH,MAAM,CAACI,IAAI;UACrC,MAAMQ,OAAO,GAAG,CAAC,GAAG7B,IAAI,EAAE,GAAGoB,QAAQ,CAAC;UACtCb,aAAa,CAACE,OAAO,GAAGoB,OAAO;UAC/B5B,OAAO,CAAC4B,OAAO,CAAC;QAClB;MACF,CAAC,CAAC,OAAOP,KAAK,EAAE,CAChB,CAAC,SAAS;QACR,IAAIC,KAAK,EAAE;UACTxB,UAAU,CAAC,KAAK,CAAC;UACjBK,WAAW,IAAIC,cAAc,CAAC,KAAK,CAAC;QACtC;MACF;IACF,CAAC,GAAG;IAEJ,OAAO,MAAOkB,KAAK,GAAG,KAAM;EAC9B,CAAC,EAAE,CAACnC,IAAI,EAAEI,QAAQ,EAAEF,QAAQ,CAAC,CAAC;EAE9B,oBACE;IAAA,wBACE,QAAC,cAAc;MACb,OAAO,EAAEH,OAAQ;MACjB,IAAI,EAAEa,IAAK;MACX,OAAO,EAAEF,OAAQ;MACjB,UAAU,EAAEU,QAAS;MACrB,IAAI,EAAEN,IAAK;MACX,WAAW,EAAEE,WAAY;MACzB,iBAAiB,EAAEM,eAAgB;MACnC,gBAAgB,EAAEI,gBAAiB;MACnC,YAAY,EAAEC;IAAa;MAAA;MAAA;MAAA;IAAA,QAC3B,eACF,QAAC,eAAe;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA,gBAClB;AAEP;AAAC,GApIQ7B,kBAAkB;AAAA,KAAlBA,kBAAkB;AAsI3BA,kBAAkB,CAAC4C,SAAS,GAAG;EAC7B3C,OAAO,EAAER,SAAS,CAACoD;AACrB,CAAC;AAED7C,kBAAkB,CAAC8C,YAAY,GAAG;EAChC7C,OAAO,EAAE;AACX,CAAC;AAED,eAAeD,kBAAkB;AAAC;AAAA"},"metadata":{},"sourceType":"module"}